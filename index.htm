<!doctype html>

<html>
  <head>
    <title>Jason's Roguelike</title>
    <link rel='stylesheet' href='../../assets/reset.css'></link>
    <link rel='stylesheet' href='../../assets/main.css'></link>
    <link rel='stylesheet' href='styles.css'></link>
    <script src='bundle.js'></script>
    <meta name='project' content='Roguelike'>
    <meta name='description' content='Adding Items'>
  </head>
  <body onload='init(document.getElementById("canvas"));'>
    <div class='sidebar'>
      {% SIDEBAR %}
    </div>
    <div class='main'>
      <div class='game roguelike'>
        <canvas id='canvas' width='400' height='240' tabindex='0'></canvas>
        <div>(live demo - cursor keys to move)</div>
      </div>
      <div class='narrative'>

<h1>Episode 4: Adding Items</h1>

<pre><code>var entities = [];

var possibleObjects = [
  'green',
  'blue',
  'purple',
  'red',
  'yellow',
  'orange',
  'white'
];

for (var i = 0; i &lt; 20; ++i) {
  do {
    if (i &lt; 3) {
      itemX = 5;
      itemY = 5;
    } else {
      itemX = floor(random() * map.width);
      itemY = floor(random() * map.height); 
    }
  } while (!canTileHoldItems(map, itemX, itemY));
  var item = {
    color: possibleObjects[floor(random() * possibleObjects.length)],
    position: {
      x: itemX,
      y: itemY
    }
  };
  entities.push(item);
}</code></pre>

<pre><code>function canTileHoldItems(map, x, y) {
  return map.tiles[y][x] === 0;
}</code></ore>

<pre><code>function findMoveableItemsAtPosition(map, x, y) {
  var out = [];
  for (var i = 0; i &lt; entities.length; ++i) {
    var e = entities[i];
    if (e.position &amp;&amp; e.position.x === x &amp;&amp; e.position.y === y) {
      out.push(e);
    }
  }
  return out;
}</code></pre>

<pre><code>var itemsAtPlayer = findMoveableItemsAtPosition(map, playerPos.x, playerPos.y);
if (itemsAtPlayer.length) {
  var panelWidth =
    5 +
    (itemsAtPlayer.length * tileSize) +
    ((itemsAtPlayer.length - 1) * 3) +
    5;
  var panelHeight = 5 + tileSize + 5;
  var panelLeft = canvasWidth - 5 - panelWidth;
  var panelTop = canvasHeight - 5 - panelHeight;
  var drawLeft = panelLeft + 5 + halfTileSize;
  var drawTop = panelTop + 5 + halfTileSize;
  ctx.fillStyle = 'white';
  ctx.fillRect(panelLeft, panelTop, panelWidth, panelHeight);
  for (var ix = 0; ix &lt; itemsAtPlayer.length; ++ix) {
    fillCircle(drawLeft, drawTop, tileSize * 0.5 - 3, itemsAtPlayer[ix].color);
    drawLeft += tileSize + 3;
  }
  ctx.strokeStyle = 'red';
  ctx.lineWidth = 1;
  if (itemSelectIndex >= itemsAtPlayer.length) {
    itemSelectIndex = 0;
  }
  ctx.strokeRect(
    panelLeft + 4 + (itemSelectIndex * (tileSize + 3)),
    panelTop + 4,
    tileSize + 2,
    tileSize + 2
  );
}</code></pre>

<pre><code>if (keyState.tab.wentDown) {
  var items = findMoveableItemsAtPosition(map, playerPos.x, playerPos.y);
  itemSelectIndex++;
  if (itemSelectIndex &gt;= items.length) {
    itemSelectIndex = 0;
  }
} else if (keyState.enter.wentDown) {
  var items = findMoveableItemsAtPosition(map, playerPos.x, playerPos.y);
  var item = items[itemSelectIndex];
  if (item) {
    item.position = null;
    item.carriedByPlayer = true;
    itemSelectIndex = Math.max(0, itemSelectIndex - 1);
  }
}</code></pre>


      </div>
    </div>
  </body>
</html>